# Copyright (c) Jupyter Development Team.
# Copyright (c) Seungkyun Hong. <nah@kakao.com>
# Distributed under the terms of the Modified BSD License.

# Ubuntu 18.04 (bionic) + NVIDIA CUDA 10.0 with runtime libraries (cuDNN/NCCL)
# https://hub.docker.com/r/nvidia/cuda/tags?name=10.0-cudnn7-runtime-ubuntu18.04
# OS/ARCH: linux/amd64
ARG ROOT_CONTAINER=nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04
ARG BASE_CONTAINER=$ROOT_CONTAINER
FROM $BASE_CONTAINER

LABEL maintainer="Seungkyun Hong <nah@kakao.com>"
ARG NB_USER="dataon"
ARG NB_UID="1000"
ARG NB_GID="100"

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# fix SSL config for unstable firewall env
# reference: https://gist.github.com/blockspacer/893b31e61c88f6899ffd0813111b3e41
# apt
RUN echo "Acquire::http::Verify-Peer \"false\";" >> /etc/apt.conf
RUN echo "Acquire::https::Verify-Peer \"false\";" >> /etc/apt.conf

RUN echo "Acquire::http::Verify-Peer \"false\";" >> /etc/apt/apt.conf.d/00proxy
RUN echo "Acquire::https::Verify-Peer \"false\";" >> /etc/apt/apt.conf.d/00proxy

# wget
RUN echo "check-certificate = off" >> /etc/.wgetrc

# curl
RUN echo "insecure" >> /etc/.curlrc

USER root

# Install all OS dependencies for c8s img that starts but lacks all features
# (e.g., download as all possible file formats)
# for hwloc, refer this: https://github.com/horovod/horovod/issues/1123
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update \
 && apt-get install -yq --no-install-recommends \
    bzip2 pigz \
    ca-certificates \
    sudo quota \
    locales fonts-liberation time \
    run-one \
    vim nano less \
    openssh-server openssh-client \
    net-tools wget \
    screen htop nload \
    parallel openmpi-bin libopenmpi-dev \
    libhdf5-openmpi-dev \
    build-essential cmake manpages-dev software-properties-common \
    gcc-4.8 g++-4.8 valgrind \
    hwloc libhwloc-dev libjemalloc1 libjemalloc-dev \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

# gcc alternatives set-up
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8 \
 && update-alternatives --config gcc

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc

# Create NB_USER wtih name dataon user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

# explicit lustre mountpoint for apps compatibility
RUN mkdir -p /mnt/share/lustre && \
    chmod -R 777 /mnt/share/lustre

USER $NB_UID
WORKDIR $HOME
ARG PYTHON_VERSION=default

# Setup work directory for backward-compatibility
#RUN mkdir /home/$NB_USER/work && \
#    fix-permissions /home/$NB_USER

# Install conda as dataon and check the md5 sum provided on the download site
ENV MINICONDA_VERSION=4.8.3 \
    MINICONDA_MD5=d63adf39f2c220950a063e0529d4ff74 \
    CONDA_VERSION=4.8.3

WORKDIR /tmp
RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    conda config --system --set channel_priority strict && \
    conda config --system --set default_threads 8 && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \
    conda install --quiet --yes conda && \
    conda install --quiet --yes pip && \
    conda update --all --quiet --yes && \
    conda clean --all -f -y && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# further local directory for external miniconda envs mount
RUN mkdir /home/$NB_USER/miniconda3 && \
    ln -s /opt/conda/usrenvs /home/$NB_USER/miniconda3/envs && \
    ln -s /mnt/workspace /home/$NB_USER/workspace && \
    fix-permissions /home/$NB_USER

# Install Tini
RUN conda install --quiet --yes 'tini=0.18.0' && \
    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \
    conda clean --all -f -y && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
# refer this for ipyparall enable: https://ipyparallel.readthedocs.io/en/latest/index.html?highlight=serverextension#installing-ipython-parallel
RUN conda install --quiet --yes \
    'notebook=6.0.3' \
    'jupyterhub=1.1.0' \
    'jupyterlab=2.1.5' \
#    'openmpi=4.0.4' \
    'nb_conda_kernels' && \
    conda clean --all -f -y && \
    npm cache clean --force && \
    jupyter notebook --generate-config && \
    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    pip install -q ipyparallel && \
    ipython profile create --parallel --profile=mpi && \
    echo "c.IPClusterStart.controller_launcher_class = 'MPIControllerLauncher'" \
    >> /home/$NB_USER/.ipython/profile_mpi/ipcluster_config.py && \
    echo "colorscheme delek" >> /home/$NB_USER/.vimrc && \
    conda init bash && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

EXPOSE 8888

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start-notebook.sh"]

# Copy local files as late as possible to avoid cache busting
COPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/
COPY jupyter_notebook_config.py /etc/jupyter/

# Fix permissions on /etc/jupyter as root
USER root
RUN fix-permissions /etc/jupyter/

# Switch back to dataon to avoid accidental container runs as root
USER $NB_UID

WORKDIR $HOME
